package com.hbcun.business.bs.entity.vo.eplink.util;	

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.hbcun.business.bs.constant.EplinkConfig;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-04-10T15:20:34.840+08:00
 * Generated source version: 3.0.4
 * 
 */
@WebServiceClient(name = "ReceivedDeclareServiceImplService", 
                  wsdlLocation = EplinkConfig.WEB_SERVICE_URL,
                  targetNamespace = "http://impl.ws.newyork.zjport.gov.cn/") 
public class ReceivedDeclareServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.ws.newyork.zjport.gov.cn/", "ReceivedDeclareServiceImplService");
    public final static QName ReceivedDeclareServiceImplPort = new QName("http://impl.ws.newyork.zjport.gov.cn/", "ReceivedDeclareServiceImplPort");
    static {
        URL url = null;
        try {
          url = new URL(EplinkConfig.WEB_SERVICE_URL);
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ReceivedDeclareServiceImplService.class.getName())
                .log(java.util.logging.Level.INFO, 
                		"Can not initialize the default wsdl from {0}", EplinkConfig.WEB_SERVICE_URL);
        }
        WSDL_LOCATION = url;
    }

    public ReceivedDeclareServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ReceivedDeclareServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ReceivedDeclareServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns ReceivedDeclareService
     */
    @WebEndpoint(name = "ReceivedDeclareServiceImplPort")
    public ReceivedDeclareService getReceivedDeclareServiceImplPort() {
        return super.getPort(ReceivedDeclareServiceImplPort, ReceivedDeclareService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ReceivedDeclareService
     */
    @WebEndpoint(name = "ReceivedDeclareServiceImplPort")
    public ReceivedDeclareService getReceivedDeclareServiceImplPort(WebServiceFeature... features) {
        return super.getPort(ReceivedDeclareServiceImplPort, ReceivedDeclareService.class, features);
    }

}
